<script>
import BackArrowIcon from "$lib/icons/BackArrow.svelte";
import PencilIcon from "$lib/icons/Pencil.svelte";
import MoreDotsIcon from "$lib/icons/MoreDotsVertical.svelte";
import CheckmarkIcon from "$lib/icons/Checkmark.svelte";
import TrashIcon from "$lib/icons/Trash.svelte";
import IconPlus from "$lib/icons/Plus.svelte";
import IconSettings from "$lib/icons/SettingsCogGear.svelte";
import { base } from "$app/paths";
let { data } = $props();
let users = $state(data.users);
let showDeleteUserConfirmation = $state(false);
let userToDeleteIndex = $state(-1);
let showAddNewUserMenu = $state(false);
async function newUser(username, password) {
    try {
        const res = await (
            await fetch(data.PUBLIC_API_URL + "/users", {
                method: "POST",
                headers: {
                    "Authorization": "Bearer " + localStorage.getItem("budgeter:auth"),
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    username: username,
                    newPassword: password,
                })
            })
        ).json();
        if (res?.id) {
            employee.id = res.id;
            users.push({
                id: id,
                username: username
            })
        } else {
            console.log(res);
            console.error("id not returned?")
        }
    } catch (err) {
        console.error("Error adding user: ", err);
        alert("Error while adding user :( ");
    }
}
async function removeEmployee() {
    try {
        const res = await (
            await fetch(data.PUBLIC_API_URL + "/employees/" + employees[employeeToDeleteIndex].id, {
                method: "DELETE",
                headers: {
                    "Authorization": "Bearer " + localStorage.getItem("budgeter:auth")
                }
            })
        ).json();
        if (res?.success) {
            employees.splice(employeeToDeleteIndex, 1);
            employees = employees; /* to update state/trigger reactivity after splice-ing */
        } else {
            console.log(res);
            alert("Error, couldn't delete ???");
        }
    } catch (err) {
        console.error("Error while deleting employee: ", err);
        alert("Error deleting employee :( ");
    } finally {
        showDeleteEmployeeConfirmation = false;
        employeeToDeleteIndex = -1;
    }
}
</script>
<div class="grid page" style="margin-top: 4rem; margin-bottom: 10rem;">
    <div class="content">
                <div style="margin-bottom: 1rem;"><a href={base} class="button faint">
                    <BackArrowIcon></BackArrowIcon>
                    Back
                </a></div>
<p>Add/Edit Users</p>

<table>
    <tbody>
        {#each users as user, userIndex}
            <tr>
                <td>{user.username}</td>
            </tr>
        {/each}
        {#if showAddNewUserMenu}
            <tr>
                <td>{user.username}</td>
            </tr>
        {/if}
        <tr>
            <td>
                <button onclick={function () {
                    users.push({
                        username: "",
                        edit: true
                    })
                }}>
                    <IconPlus></IconPlus>
                    Add
                </button>
            </td>
        </tr>
    </tbody>
</table>
<table style="margin-top: 4rem;">
    <thead>
        <tr>
            <th>Name</th>
            <th>Weekly Pay</th>
        </tr>
    </thead>
    <tbody>
        {#each valentinos as valentino, valentinoIndex}
            <tr>
                {#if valentino.edit}
                    <td><input type="text" placeholder="Name" bind:value={valentino.name} style="min-width: 6rem; field-sizing: content;"></td>
                    <td>
                        <div class="flex compact-gap nowrap" style="align-items: center; align-content: center;"><span>$</span><input type="text" placeholder="1234.56" bind:value={valentino.weeklyPay} style="min-width: 6rem; field-sizing: content;"></div>
                    </td>
                    <td><button onclick={async function () {
                        valentino.edit = false
                        if (isNaN(parseFloat(valentino.weeklyPay))) {
                            /* isNaN(null) returns false
                            isNaN(parseFloat(null)) returns true */
                            valentino.weeklyPay = 0;
                        } else {
                            if (typeof valentino.weeklyPay === "string") {
                                /* remove any user-inputted commas for thousands */
                                valentino.weeklyPay = valentino.weeklyPay.replaceAll(
                                    ",", ""
                                );
                            }
                            valentino.weeklyPay = parseFloat(valentino.weeklyPay);
                        }
                        if (valentino.id == null) {
                            try {
                                const res = await (
                                    await fetch(data.PUBLIC_API_URL + "/valentinos", {
                                        method: "POST",
                                        headers: {
                                            "Authorization": "Bearer " + localStorage.getItem("budgeter:auth"),
                                            "Content-Type": "application/json"
                                        },
                                        body: JSON.stringify({
                                            name: valentino.name,
                                            weeklyPay: valentino.weeklyPay,
                                        })
                                    })
                                ).json();
                                if (res?.id) {
                                    valentino.id = res.id;
                                } else {
                                    console.log(res);
                                    console.error("id not returned?")
                                }
                            } catch (err) {
                                console.error("Error adding valentino: ", err);
                                alert("Error while adding valentino :( ");
                            }
                        } else {
                            try {
                                const res = await (
                                    await fetch(data.PUBLIC_API_URL + "/valentinos/" + valentino.id, {
                                        method: "PUT",
                                        headers: {
                                            "Authorization": "Bearer " + localStorage.getItem("budgeter:auth"),
                                            "Content-Type": "application/json"
                                        },
                                        body: JSON.stringify({
                                            name: valentino.name,
                                            weeklyPay: valentino.weeklyPay,
                                        })
                                    })
                                ).json();
                            } catch (err) {
                                console.error("Error adding valentino: ", err);
                                alert("Error while adding valentino :( ");
                            }
                        }
                    }}><CheckmarkIcon></CheckmarkIcon> Save</button></td>
                {:else}
                    <td>{valentino.name}</td>
                    <td>${
                        valentino.weeklyPay.toLocaleString(
                            "en-US",
                            {
                                minimumFractionDigits: 2,
                                maximumFractionDigits: 2
                            }
                        )
                    }</td>
                    <td>
                        <div class="flex" style="flex-wrap: nowrap;">
                            <button class="alt" onclick={function () {
                                valentino.edit = true
                            }}><PencilIcon></PencilIcon> Edit</button>
                            <div class="dropdown">
                                <button class="icon-only-button" aria-label="dropdown">
                                    <MoreDotsIcon></MoreDotsIcon>
                                </button>
                                <div class="content">
                                    <button class="ohno" onclick={() => {
                                        valentinoToDeleteIndex = valentinoIndex;
                                        if (valentino.name) {
                                            showDeleteValentinoConfirmation = true;
                                        } else {
                                            /* if name is blank, delete directly,
                                            don't show confirmation alert/modal/popup */
                                            removeValentino();
                                        }
                                    }}>
                                        <TrashIcon></TrashIcon> Delete
                                    </button>
                                </div>
                            </div>
                        </div>
                    </td>
                {/if}
            </tr>
        {/each}
        <tr>
            <td>
                <button onclick={function () {
                    valentinos.push({
                        name: "",
                        weeklyPay: "",
                        edit: true
                    })
                }}>
                    <IconPlus></IconPlus>
                    Add
                </button>
            </td>
        </tr>
    </tbody>
</table>
</div>
</div>
{#if showDeleteEmployeeConfirmation}
    <div class="modal">
        <div class="content">
            <p>Are you sure you want to remove "{employees[employeeToDeleteIndex].name}"?</p>
            <div class="flex">
                <button class="ohno" onclick={removeEmployee}>
                    <TrashIcon></TrashIcon>
                    Remove
                </button>
                <button class="alt" onclick={() => {
                    showDeleteEmployeeConfirmation = false;
                    employeeToDeleteIndex = -1;
                }}>Cancel</button>
            </div>
        </div>
    </div>
{/if}
{#if showDeleteValentinoConfirmation}
    <div class="modal">
        <div class="content">
            <p>Are you sure you want to remove "{valentinos[valentinoToDeleteIndex].name}"?</p>
            <div class="flex">
                <button class="ohno" onclick={removeValentino}>
                    <TrashIcon></TrashIcon>
                    Remove
                </button>
                <button class="alt" onclick={() => {
                    showDeleteValentinoConfirmation = false;
                    valentinoToDeleteIndex = -1;
                }}>Cancel</button>
            </div>
        </div>
    </div>
{/if}
{#if showSpecialPayEditing}
    <div class="modal">
        <div class="content">
            {#if employees[specialPayEditingEmployeeIndex].name}
                <p>Special Pay Settings for {employees[specialPayEditingEmployeeIndex].name}</p>
            {:else}
                <p>Special Pay Settings</p>
            {/if}
            <div class="combo-select">
                <button class="left {
                    employees[specialPayEditingEmployeeIndex].specialPay ? "" : "selected"
                }" onclick={() => {
                    employees[specialPayEditingEmployeeIndex].specialPay = undefined;
                }}>
                    <CheckmarkIcon class="combo-selected-icon"></CheckmarkIcon>
                    Hourly wage
                </button>
                <button class="right {
                    employees[specialPayEditingEmployeeIndex].specialPay ? "selected" : ""
                }" onclick={() => {
                    employees[specialPayEditingEmployeeIndex].specialPay = {
                        mon: {
                            perDay: null,
                            perHour: null
                        },
                        tue: {
                            perDay: null,
                            perHour: null
                        },
                        wed: {
                            perDay: null,
                            perHour: null
                        },
                        thu: {
                            perDay: null,
                            perHour: null
                        },
                        fri: {
                            perDay: null,
                            perHour: null
                        },
                        sat: {
                            perDay: null,
                            perHour: null
                        },
                        sun: {
                            perDay: null,
                            perHour: null
                        },
                    };
                }}>
                    <CheckmarkIcon class="combo-selected-icon"></CheckmarkIcon>
                    Special pay
                </button>
            </div>
            {#if employees[specialPayEditingEmployeeIndex].specialPay}
                <table style="border: none;">
                    <thead>
                        <tr>
                            <th>Day</th>
                            <th>Daily</th>
                            <th>Hourly</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Monday</td>
                            <td>
                                <div class="flex compact-gap nowrap" style="align-items: center; align-content: center;">
                                    <span>$</span>
                                    <input type="text" placeholder="" bind:value={
                                        employees[
                                            specialPayEditingEmployeeIndex
                                        ].specialPay.mon.perDay
                                    } style="min-width: 5rem; field-sizing: content;">
                                </div>
                            </td>
                            <td>
                                <div class="flex compact-gap nowrap" style="align-items: center; align-content: center;">
                                    <span>$</span>
                                    <input type="text" placeholder="" bind:value={
                                        employees[
                                            specialPayEditingEmployeeIndex
                                        ].specialPay.mon.perHour
                                    } style="min-width: 5rem; field-sizing: content;">
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <td>Tuesday</td>
                            <td>
                                <div class="flex compact-gap nowrap" style="align-items: center; align-content: center;">
                                    <span>$</span>
                                    <input type="text" placeholder="" bind:value={
                                        employees[
                                            specialPayEditingEmployeeIndex
                                        ].specialPay.tue.perDay
                                    } style="min-width: 5rem; field-sizing: content;">
                                </div>
                            </td>
                            <td>
                                <div class="flex compact-gap nowrap" style="align-items: center; align-content: center;">
                                    <span>$</span>
                                    <input type="text" placeholder="" bind:value={
                                        employees[
                                            specialPayEditingEmployeeIndex
                                        ].specialPay.tue.perHour
                                    } style="min-width: 5rem; field-sizing: content;">
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <td>Wednesday</td>
                            <td>
                                <div class="flex compact-gap nowrap" style="align-items: center; align-content: center;">
                                    <span>$</span>
                                    <input type="text" placeholder="" bind:value={
                                        employees[
                                            specialPayEditingEmployeeIndex
                                        ].specialPay.wed.perDay
                                    } style="min-width: 5rem; field-sizing: content;">
                                </div>
                            </td>
                            <td>
                                <div class="flex compact-gap nowrap" style="align-items: center; align-content: center;">
                                    <span>$</span>
                                    <input type="text" placeholder="" bind:value={
                                        employees[
                                            specialPayEditingEmployeeIndex
                                        ].specialPay.wed.perHour
                                    } style="min-width: 5rem; field-sizing: content;">
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <td>Thursday</td>
                            <td>
                                <div class="flex compact-gap nowrap" style="align-items: center; align-content: center;">
                                    <span>$</span>
                                    <input type="text" placeholder="" bind:value={
                                        employees[
                                            specialPayEditingEmployeeIndex
                                        ].specialPay.thu.perDay
                                    } style="min-width: 5rem; field-sizing: content;">
                                </div>
                            </td>
                            <td>
                                <div class="flex compact-gap nowrap" style="align-items: center; align-content: center;">
                                    <span>$</span>
                                    <input type="text" placeholder="" bind:value={
                                        employees[
                                            specialPayEditingEmployeeIndex
                                        ].specialPay.thu.perHour
                                    } style="min-width: 5rem; field-sizing: content;">
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <td>Friday</td>
                            <td>
                                <div class="flex compact-gap nowrap" style="align-items: center; align-content: center;">
                                    <span>$</span>
                                    <input type="text" placeholder="" bind:value={
                                        employees[
                                            specialPayEditingEmployeeIndex
                                        ].specialPay.fri.perDay
                                    } style="min-width: 5rem; field-sizing: content;">
                                </div>
                            </td>
                            <td>
                                <div class="flex compact-gap nowrap" style="align-items: center; align-content: center;">
                                    <span>$</span>
                                    <input type="text" placeholder="" bind:value={
                                        employees[
                                            specialPayEditingEmployeeIndex
                                        ].specialPay.fri.perHour
                                    } style="min-width: 5rem; field-sizing: content;">
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <td>Saturday</td>
                            <td>
                                <div class="flex compact-gap nowrap" style="align-items: center; align-content: center;">
                                    <span>$</span>
                                    <input type="text" placeholder="" bind:value={
                                        employees[
                                            specialPayEditingEmployeeIndex
                                        ].specialPay.sat.perDay
                                    } style="min-width: 5rem; field-sizing: content;">
                                </div>
                            </td>
                            <td>
                                <div class="flex compact-gap nowrap" style="align-items: center; align-content: center;">
                                    <span>$</span>
                                    <input type="text" placeholder="" bind:value={
                                        employees[
                                            specialPayEditingEmployeeIndex
                                        ].specialPay.sat.perHour
                                    } style="min-width: 5rem; field-sizing: content;">
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <td>Sunday</td>
                            <td>
                                <div class="flex compact-gap nowrap" style="align-items: center; align-content: center;">
                                    <span>$</span>
                                    <input type="text" placeholder="" bind:value={
                                        employees[
                                            specialPayEditingEmployeeIndex
                                        ].specialPay.sun.perDay
                                    } style="min-width: 5rem; field-sizing: content;">
                                </div>
                            </td>
                            <td>
                                <div class="flex compact-gap nowrap" style="align-items: center; align-content: center;">
                                    <span>$</span>
                                    <input type="text" placeholder="" bind:value={
                                        employees[
                                            specialPayEditingEmployeeIndex
                                        ].specialPay.sun.perHour
                                    } style="min-width: 5rem; field-sizing: content;">
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <p class="fg0">Leave the ones you don't need blank :)</p>
            {/if}
            <div class="flex">
                <button onclick={() => {
                    [
                        "mon",
                        "tue",
                        "wed",
                        "thu",
                        "fri",
                        "sat",
                        "sun"
                    ].forEach(function (day) {
                    /* parse strings as floats when done is pressed */
                        const dayObj = employees[
                            specialPayEditingEmployeeIndex
                        ].specialPay[day]; /* reference to the object,
                        so the og array & obj gets updated correctly */
                        if (isNaN(parseFloat(dayObj.perDay))) {
                            /* isNaN(null) returns false
                            isNaN(parseFloat(null)) returns true */
                            dayObj.perDay = null;
                        } else {
                            if (typeof dayObj.perDay === "string") {
                                /* remove any user-inputted commas for thousands */
                                dayObj.perDay = dayObj.perDay.replaceAll(",", "");
                            }
                            dayObj.perDay = parseFloat(dayObj.perDay);
                        }
                        if (isNaN(parseFloat(dayObj.perHour))) {
                            dayObj.perHour = null;
                        } else {
                            if (typeof dayObj.perHour === "string") {
                                /* remove any user-inputted commas for thousands */
                                dayObj.perHour = dayObj.perHour.replaceAll(",", "");
                            }
                            dayObj.perHour = parseFloat(dayObj.perHour);
                        }
                    })

                    showSpecialPayEditing = false;
                    saveEmployee(employees[specialPayEditingEmployeeIndex]);
                }}><CheckmarkIcon></CheckmarkIcon> Done</button>
            </div>
        </div>
    </div>
{/if}

package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.74

import (
	"context"
	"fmt"
	"la-cipollina-budgeter-api/graph/model"
)

// AddEmployee is the resolver for the addEmployee field.
func (r *mutationResolver) AddEmployee(ctx context.Context, input model.NewEmployee) (*model.Employee, error) {
	panic(fmt.Errorf("not implemented: AddEmployee - addEmployee"))
}

// UpdateEmployee is the resolver for the updateEmployee field.
func (r *mutationResolver) UpdateEmployee(ctx context.Context, name string, input *model.UpdateEmployee) (*model.Employee, error) {
	panic(fmt.Errorf("not implemented: UpdateEmployee - updateEmployee"))
}

// Employees is the resolver for the employees field.
func (r *queryResolver) Employees(ctx context.Context) ([]*model.Employee, error) {
	panic(fmt.Errorf("not implemented: Employees - employees"))
}

// FloorWorkers is the resolver for the floorWorkers field.
func (r *queryResolver) FloorWorkers(ctx context.Context) ([]*model.Employee, error) {
	panic(fmt.Errorf("not implemented: FloorWorkers - floorWorkers"))
}

// KitchenWorkers is the resolver for the kitchenWorkers field.
func (r *queryResolver) KitchenWorkers(ctx context.Context) ([]*model.Employee, error) {
	panic(fmt.Errorf("not implemented: KitchenWorkers - kitchenWorkers"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
